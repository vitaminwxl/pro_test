"""
Django settings for nurse project.

Generated by 'django-admin startproject' using Django 1.9.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
import logging
import logging.config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


from ConfigParser import ConfigParser
config = ConfigParser()
config.read(os.path.join(BASE_DIR,'nurse.conf'))
#mysql settings
MYSQL_HOST = config.get('mysql','host')
MYSQL_USER = config.get('mysql','user')
MYSQL_DB = config.get('mysql','db')
MYSQL_PASSWORD = config.get('mysql','password')
MYSQL_PORT = int(config.get('mysql','port'))

#named settings
BIND_DIR = config.get('named','bind_dir')
backup_dir = config.get('named','backup_dir')
rndc = config.get('named','rndc')
named_checkconf = config.get('named','named_checkconf')
named_checkzone = config.get('named','named_checkzone')
dnssec_keygen = config.get('named','dnssec-keygen')
user = config.get('named','user')
group = config.get('named','group')
named = config.get('named','named')
slave_ip = config.get('named','slave_ip')
master_ip = config.get('named','master_ip')

file_mode = 0644
dir_mode = 0755
slave_dir = os.path.join(BIND_DIR,'slave')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '00rd$rg==a7x59e#=!xpbuvo%r+2ef$3xb7$3u(*k93=_88_bb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'dns',
    'ruser',
    'djcelery',
]

MIDDLEWARE_CLASSES = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'audit_log.middleware.UserLoggingMiddleware',
]

ROOT_URLCONF = 'nurse.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nurse.wsgi.application'
#
# AUTH_USER_MODEL = 'ruser.User'
# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': MYSQL_DB,
        'USER': MYSQL_USER,
        'HOST': MYSQL_HOST,
        'PASSWORD': MYSQL_PASSWORD,
        'PORT': 3306,
    }
}

AUTHENTICATION_BACKENDS = (
    'ruser.backends.LdapBackend',
    'django.contrib.auth.backends.ModelBackend',)

LOGIN_URL='/login/'
# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
            os.path.join(BASE_DIR, "static"),
        )

#logging
LOGGING = {
    'version': 1,
    'disable_exising_loggers': True,
    'formatters':{
        'verbose':{
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s'
        },
        'simple':{
            'format': '%(asctime)s - %(levelname)s %(message)s'
        },
        'default':{
            'format': '%(asctime)s - %(filename)s:%(lineno)s - %(levelname)s - %(message)s'
        }
    },
    'handlers':{
        'console':{
            'level': 'DEBUG',
            'class': 'logging.StreamHandler'
        },
        'file':{
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR,'mylogging.log'),
            'formatter': 'default',
        }
    },
    'loggers':{
        'mylogger':{
            'level': 'INFO',
            'handlers': ['file'],
            'propagate': True
        }
    }
}

logging.config.dictConfig(LOGGING)
logger = logging.getLogger('mylogger')

import djcelery
djcelery.setup_loader()

BROKER_URL = 'redis://g1rds01.dns.pro.gomeplus.com:8000/0'
SESSION_COOKIE_AGE = 1800
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
